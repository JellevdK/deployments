---
# bosh deploy -d concourse concourse-ntp-pdns-gce.yml -l <(lpass show --note deployments)
name: concourse

releases:
- name: concourse
  version: latest
- name: garden-runc
  version: latest
- name: nginx
  version: latest
- name: ntp
  version: latest
- name: pdns
  version: latest

stemcells:
- alias: ubuntu
  os: ubuntu-trusty
  version: latest

instance_groups:
- name: concourse
  instances: 1
  azs: [ us-central1-b ]
  vm_type: concourse
  persistent_disk_type: concourse
  stemcell: ubuntu
  azs: [ us-central1-b ]
  networks:
  - name: vip
    # CHANGEME: replace the IP address with your Elastic IP
    static_ips: [104.155.144.4]
  - name: dynamic
    default: [ dns, gateway ]
  jobs:
  - name: atc
    release: concourse
    properties:
      # replace with your CI's externally reachable URL, e.g. https://ci.foo.com
      external_url: https://ci.nono.io
      github_auth:
        authorize:
        - user: cunnie
        client_id: d4d77ce34ecc620d5220
        client_secret: ((github_concourse_nono_auth_client_secret))
      publicly_viewable: true
      postgresql_database: &atc_db atc
      # replace with your SSL cert and key
  - name: tsa
    release: concourse
    properties: {}
  - name: postgresql
    release: concourse
    properties:
      databases:
      - name: *atc_db
        # make up a role and password
        role: atc
        password: ((concourse_postgres_passwd))
  - name: groundcrew
    release: concourse
    properties: {}
  - name: baggageclaim
    release: concourse
    properties: {}
  - name: garden
    release: garden-runc
    properties:
      garden:
        listen_network: tcp
        listen_address: 0.0.0.0:7777
  - name: nginx
    release: nginx
    properties:
      nginx_conf: |
        worker_processes  1;
        error_log /var/vcap/sys/log/nginx/error.log   info;
        events {
          worker_connections  1024;
        }
        http {
          include /var/vcap/packages/nginx/conf/mime.types;
          default_type  application/octet-stream;
          sendfile        on;
          keepalive_timeout  65;
          server_names_hash_bucket_size 64;
          # redirect HTTP to HTTPS
          server {
            server_name _; # invalid value which will never trigger on a real hostname.
            listen 80;
            rewrite ^ https://ci.nono.io$request_uri?;
            access_log /var/vcap/sys/log/nginx/ci.nono.io-access.log;
            error_log /var/vcap/sys/log/nginx/ci.nono.io-error.log;
          }
          server {
            server_name ci.nono.io;
            # weak DH https://weakdh.org/sysadmin.html
            ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
            ssl_prefer_server_ciphers on;
            # poodle https://scotthelme.co.uk/sslv3-goes-to-the-dogs-poodle-kills-off-protocol/
            ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
            listen              443 ssl;
            ssl_certificate     /var/vcap/jobs/nginx/etc/ssl_chained.crt.pem;
            ssl_certificate_key /var/vcap/jobs/nginx/etc/ssl.key.pem;
            access_log /var/vcap/sys/log/nginx/ci.nono.io-access.log;
            error_log /var/vcap/sys/log/nginx/ci.nono.io-error.log;
            root /var/vcap/jobs/nginx/www/document_root;
            index index.shtml index.html index.htm;
            # https://www.digitalocean.com/community/tutorials/how-to-configure-nginx-with-ssl-as-a-reverse-proxy-for-jenkins
            location / {
                proxy_set_header  Host $host;
                proxy_set_header  X-Real-IP $remote_addr;
                proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header  X-Forwarded-Proto $scheme;
                # Fix `websocket: bad handshake` when using `fly intercept`
                proxy_set_header  Upgrade $http_upgrade;
                proxy_set_header  Connection "upgrade";

                # Fix the â€œIt appears that your reverse proxy set up is broken" error.
                proxy_pass          http://localhost:8080;
                proxy_read_timeout  90;

                proxy_redirect      http://localhost:8080 https://ci.nono.io;
            }

          }
        }
      # FIXME: replace with your HTTPS SSL key
      ssl_key: ((nono_io_key))
      # FIXME: replace with your HTTPS SSL chained certificate
      ssl_chained_cert: |
        -----BEGIN CERTIFICATE-----
        MIIFXDCCBESgAwIBAgIQOvRHkhKyb/k9O4xvIi9zZTANBgkqhkiG9w0BAQsFADCB
        kDELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G
        A1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxNjA0BgNV
        BAMTLUNPTU9ETyBSU0EgRG9tYWluIFZhbGlkYXRpb24gU2VjdXJlIFNlcnZlciBD
        QTAeFw0xNjA3MDYwMDAwMDBaFw0xOTA3MDYyMzU5NTlaMFoxITAfBgNVBAsTGERv
        bWFpbiBDb250cm9sIFZhbGlkYXRlZDEhMB8GA1UECxMYUG9zaXRpdmVTU0wgTXVs
        dGktRG9tYWluMRIwEAYDVQQDDAkqLm5vbm8uaW8wggEiMA0GCSqGSIb3DQEBAQUA
        A4IBDwAwggEKAoIBAQC3LnOi4qIl91BDjkNRHUC+ECvODAwDF/9z7ZAQq55FKoJ+
        bqWMBcDV0BVh1OzREpqS0ORW/e5rvpiyO6ajRvE0g6PmzNhuSL5eeAVIbvLsfN6l
        vEdE69QCXZ3UI+l1KzhPnx5xeSQf9UOvlkpMVkSyIuLcvMCSAekJne3S6YOHwLSA
        oQOwnO5dp2Im4pOoQ86Pth25szfRu8uvd3nXBZQOiDv/ttk7dLQvdDM+KAqefhwo
        cQFaWPxrQERjwDpsmf2jjjLZzP1uemwA9h74lxeAJKV6Ph9uJ6EjWRYuAYlo7i0v
        mn9o20VslP1wnWKHreq2jFLU93SPzNCWmZr+nAIRAgMBAAGjggHlMIIB4TAfBgNV
        HSMEGDAWgBSQr2o6lFoL2JDqElZz30O0Oija5zAdBgNVHQ4EFgQUbfZ/qwsJA124
        awOjcusTRuVBi+IwDgYDVR0PAQH/BAQDAgWgMAwGA1UdEwEB/wQCMAAwHQYDVR0l
        BBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCME8GA1UdIARIMEYwOgYLKwYBBAGyMQEC
        AgcwKzApBggrBgEFBQcCARYdaHR0cHM6Ly9zZWN1cmUuY29tb2RvLmNvbS9DUFMw
        CAYGZ4EMAQIBMFQGA1UdHwRNMEswSaBHoEWGQ2h0dHA6Ly9jcmwuY29tb2RvY2Eu
        Y29tL0NPTU9ET1JTQURvbWFpblZhbGlkYXRpb25TZWN1cmVTZXJ2ZXJDQS5jcmww
        gYUGCCsGAQUFBwEBBHkwdzBPBggrBgEFBQcwAoZDaHR0cDovL2NydC5jb21vZG9j
        YS5jb20vQ09NT0RPUlNBRG9tYWluVmFsaWRhdGlvblNlY3VyZVNlcnZlckNBLmNy
        dDAkBggrBgEFBQcwAYYYaHR0cDovL29jc3AuY29tb2RvY2EuY29tMDMGA1UdEQQs
        MCqCCSoubm9uby5pb4IKKi5ub25vLmNvbYIIbm9uby5jb22CB25vbm8uaW8wDQYJ
        KoZIhvcNAQELBQADggEBAIM9PPckdm0CUoywdKmfpRG14bZ5iHN/iTNk+qnQeNlU
        ovxM6FHS1w+x3/TSQhh1FNtWDNQcLn2BD+Yk+3b5mBc+WbpcAbBp2dbpGlSPeLD4
        6SorB8ZHwHiY40FWE/6uyuC5wpy1BN+OwH9KoKVdiXlsY2ApXoU2U57s5haV7Jjm
        gn9ZpyWhsvbpcLO9d029vNim3qT96mY3LMx6PM269Ref0Aieq7rGw38Xu3FQLBMU
        l9E/Q+90B+aR9UsmslfjWFZz7MyhZG/bJXt+0XxFAjF08Nwe1qX5n+3Tn4ogwuuO
        NaaNSyS8pHUJhaq+ZiC7zM2YsuLBICPQfsunHGrho4k=
        -----END CERTIFICATE-----
        -----BEGIN CERTIFICATE-----
        MIIGCDCCA/CgAwIBAgIQKy5u6tl1NmwUim7bo3yMBzANBgkqhkiG9w0BAQwFADCB
        hTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G
        A1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxKzApBgNV
        BAMTIkNPTU9ETyBSU0EgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTQwMjEy
        MDAwMDAwWhcNMjkwMjExMjM1OTU5WjCBkDELMAkGA1UEBhMCR0IxGzAZBgNVBAgT
        EkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UEBxMHU2FsZm9yZDEaMBgGA1UEChMR
        Q09NT0RPIENBIExpbWl0ZWQxNjA0BgNVBAMTLUNPTU9ETyBSU0EgRG9tYWluIFZh
        bGlkYXRpb24gU2VjdXJlIFNlcnZlciBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEP
        ADCCAQoCggEBAI7CAhnhoFmk6zg1jSz9AdDTScBkxwtiBUUWOqigwAwCfx3M28Sh
        bXcDow+G+eMGnD4LgYqbSRutA776S9uMIO3Vzl5ljj4Nr0zCsLdFXlIvNN5IJGS0
        Qa4Al/e+Z96e0HqnU4A7fK31llVvl0cKfIWLIpeNs4TgllfQcBhglo/uLQeTnaG6
        ytHNe+nEKpooIZFNb5JPJaXyejXdJtxGpdCsWTWM/06RQ1A/WZMebFEh7lgUq/51
        UHg+TLAchhP6a5i84DuUHoVS3AOTJBhuyydRReZw3iVDpA3hSqXttn7IzW3uLh0n
        c13cRTCAquOyQQuvvUSH2rnlG51/ruWFgqUCAwEAAaOCAWUwggFhMB8GA1UdIwQY
        MBaAFLuvfgI9+qbxPISOre44mOzZMjLUMB0GA1UdDgQWBBSQr2o6lFoL2JDqElZz
        30O0Oija5zAOBgNVHQ8BAf8EBAMCAYYwEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNV
        HSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwGwYDVR0gBBQwEjAGBgRVHSAAMAgG
        BmeBDAECATBMBgNVHR8ERTBDMEGgP6A9hjtodHRwOi8vY3JsLmNvbW9kb2NhLmNv
        bS9DT01PRE9SU0FDZXJ0aWZpY2F0aW9uQXV0aG9yaXR5LmNybDBxBggrBgEFBQcB
        AQRlMGMwOwYIKwYBBQUHMAKGL2h0dHA6Ly9jcnQuY29tb2RvY2EuY29tL0NPTU9E
        T1JTQUFkZFRydXN0Q0EuY3J0MCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5jb21v
        ZG9jYS5jb20wDQYJKoZIhvcNAQEMBQADggIBAE4rdk+SHGI2ibp3wScF9BzWRJ2p
        mj6q1WZmAT7qSeaiNbz69t2Vjpk1mA42GHWx3d1Qcnyu3HeIzg/3kCDKo2cuH1Z/
        e+FE6kKVxF0NAVBGFfKBiVlsit2M8RKhjTpCipj4SzR7JzsItG8kO3KdY3RYPBps
        P0/HEZrIqPW1N+8QRcZs2eBelSaz662jue5/DJpmNXMyYE7l3YphLG5SEXdoltMY
        dVEVABt0iN3hxzgEQyjpFv3ZBdRdRydg1vs4O2xyopT4Qhrf7W8GjEXCBgCq5Ojc
        2bXhc3js9iPc0d1sjhqPpepUfJa3w/5Vjo1JXvxku88+vZbrac2/4EjxYoIQ5QxG
        V/Iz2tDIY+3GH5QFlkoakdH368+PUq4NCNk+qKBR6cGHdNXJ93SrLlP7u3r7l+L4
        HyaPs9Kg4DdbKDsx5Q5XLVq4rXmsXiBmGqW5prU5wfWYQ//u+aen/e7KJD2AFsQX
        j4rBYKEMrltDR5FL1ZoXX/nUh8HCjLfn4g8wGTeGrODcQgPmlKidrv0PJFGUzpII
        0fxQ8ANAe4hZ7Q7drNJ3gjTcBpUC2JD5Leo31Rpg0Gcg19hCC0Wvgmje3WYkN5Ap
        lBlGGSW4gNfL1IYoakRwJiNiqZ+Gb7+6kHDSVneFeO/qJakXzlByjAA6quPbYzSf
        +AZxAeKCINT+b72x
        -----END CERTIFICATE-----
        -----BEGIN CERTIFICATE-----
        MIIFdDCCBFygAwIBAgIQJ2buVutJ846r13Ci/ITeIjANBgkqhkiG9w0BAQwFADBv
        MQswCQYDVQQGEwJTRTEUMBIGA1UEChMLQWRkVHJ1c3QgQUIxJjAkBgNVBAsTHUFk
        ZFRydXN0IEV4dGVybmFsIFRUUCBOZXR3b3JrMSIwIAYDVQQDExlBZGRUcnVzdCBF
        eHRlcm5hbCBDQSBSb290MB4XDTAwMDUzMDEwNDgzOFoXDTIwMDUzMDEwNDgzOFow
        gYUxCzAJBgNVBAYTAkdCMRswGQYDVQQIExJHcmVhdGVyIE1hbmNoZXN0ZXIxEDAO
        BgNVBAcTB1NhbGZvcmQxGjAYBgNVBAoTEUNPTU9ETyBDQSBMaW1pdGVkMSswKQYD
        VQQDEyJDT01PRE8gUlNBIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIICIjANBgkq
        hkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAkehUktIKVrGsDSTdxc9EZ3SZKzejfSNw
        AHG8U9/E+ioSj0t/EFa9n3Byt2F/yUsPF6c947AEYe7/EZfH9IY+Cvo+XPmT5jR6
        2RRr55yzhaCCenavcZDX7P0N+pxs+t+wgvQUfvm+xKYvT3+Zf7X8Z0NyvQwA1onr
        ayzT7Y+YHBSrfuXjbvzYqOSSJNpDa2K4Vf3qwbxstovzDo2a5JtsaZn4eEgwRdWt
        4Q08RWD8MpZRJ7xnw8outmvqRsfHIKCxH2XeSAi6pE6p8oNGN4Tr6MyBSENnTnIq
        m1y9TBsoilwie7SrmNnu4FGDwwlGTm0+mfqVF9p8M1dBPI1R7Qu2XK8sYxrfV8g/
        vOldxJuvRZnio1oktLqpVj3Pb6r/SVi+8Kj/9Lit6Tf7urj0Czr56ENCHonYhMsT
        8dm74YlguIwoVqwUHZwK53Hrzw7dPamWoUi9PPevtQ0iTMARgexWO/bTouJbt7IE
        IlKVgJNp6I5MZfGRAy1wdALqi2cVKWlSArvX31BqVUa/oKMoYX9w0MOiqiwhqkfO
        KJwGRXa/ghgntNWutMtQ5mv0TIZxMOmm3xaG4Nj/QN370EKIf6MzOi5cHkERgWPO
        GHFrK+ymircxXDpqR+DDeVnWIBqv8mqYqnK8V0rSS527EPywTEHl7R09XiidnMy/
        s1Hap0flhFMCAwEAAaOB9DCB8TAfBgNVHSMEGDAWgBStvZh6NLQm9/rEJlTvA73g
        JMtUGjAdBgNVHQ4EFgQUu69+Aj36pvE8hI6t7jiY7NkyMtQwDgYDVR0PAQH/BAQD
        AgGGMA8GA1UdEwEB/wQFMAMBAf8wEQYDVR0gBAowCDAGBgRVHSAAMEQGA1UdHwQ9
        MDswOaA3oDWGM2h0dHA6Ly9jcmwudXNlcnRydXN0LmNvbS9BZGRUcnVzdEV4dGVy
        bmFsQ0FSb290LmNybDA1BggrBgEFBQcBAQQpMCcwJQYIKwYBBQUHMAGGGWh0dHA6
        Ly9vY3NwLnVzZXJ0cnVzdC5jb20wDQYJKoZIhvcNAQEMBQADggEBAGS/g/FfmoXQ
        zbihKVcN6Fr30ek+8nYEbvFScLsePP9NDXRqzIGCJdPDoCpdTPW6i6FtxFQJdcfj
        Jw5dhHk3QBN39bSsHNA7qxcS1u80GH4r6XnTq1dFDK8o+tDb5VCViLvfhVdpfZLY
        Uspzgb8c8+a4bmYRBbMelC1/kZWSWfFMzqORcUx8Rww7Cxn2obFshj5cqsQugsv5
        B5a6SE2Q8pTIqXOi6wZ7I53eovNNVZ96YUWYGGjHXkBrI/V5eu+MtWuLt29G9Hvx
        PUsE2JOAWVrgQSQdso8VYFhH2+9uRv0V9dlfmrPb2LjkQLPNlzmuhbsdjrzch5vR
        pu/xO28QOG8=
        -----END CERTIFICATE-----
  - release: ntp
    name: ntpd
    properties:
      ntp_conf: |
        # Our upstream timekeepers; thank you Virginia Tech
        server ntp-1.vt.edu
        server ntp-2.vt.edu
        server ntp-3.vt.edu
        server time-b.nist.gov
        # "Batten down the hatches!"
        # see http://support.ntp.org/bin/view/Support/AccessRestrictions
        restrict default limited kod nomodify notrap nopeer
        # GCE doesn't have IPv6, but I restrict it anyway
        restrict -6 default limited kod nomodify notrap nopeer
        restrict 127.0.0.0 mask 255.0.0.0
        restrict -6 ::1
        # require at least 1s between packets from an address, rather than the default of 2s
        # http://lists.ntp.org/pipermail/questions/2010-April/026306.html
        discard minimum 0
  - release: pdns
    name: pdns
    properties:
      named_conf: |
        zone "nono.com" {
          type slave;
            file "/var/vcap/jobs/pdns/etc/nono.com";
            masters { 78.46.204.247; };
        };
        zone "nono.io" {
          type slave;
            file "/var/vcap/jobs/pdns/etc/nono.io";
            masters { 78.46.204.247; };
        };
      pdns_conf: |
        launch=bind:first,pipe:second
        slave=yes
        bind-first-config=/var/vcap/jobs/pdns/etc/named.conf
        pipe-second-command=/var/vcap/jobs/pdns/bin/pipe /var/vcap/jobs/pdns/etc/pipe.conf
      pipe: |
        #!/usr/bin/env bash
        set -e
        shopt -s nocasematch

        #
        # Configuration
        #
        XIP_DOMAIN="xip.test"
        XIP_ROOT_ADDRESSES=( "127.0.0.1" )
        XIP_NS_ADDRESSES=( "127.0.0.1" )
        XIP_MX_RECORDS=( )
        XIP_TIMESTAMP="0"
        XIP_TTL=300

        if [ -a "$1" ]; then
          source "$1"
        fi


        #
        # Protocol helpers
        #
        read_cmd() {
          local IFS=$'\t'
          local i=0
          local arg

          read -ra CMD
          for arg; do
            eval "$arg=\"\${CMD[$i]}\""
            let i=i+1
          done
        }

        send_cmd() {
          local IFS=$'\t'
          printf "%s\n" "$*"
        }

        fail() {
          send_cmd "FAIL"
          log "Exiting"
          exit 1
        }

        read_helo() {
          read_cmd HELO VERSION
          [ "$HELO" = "HELO" ] && [ "$VERSION" = "1" ]
        }

        read_query() {
          read_cmd TYPE QNAME QCLASS QTYPE ID IP
        }

        send_answer() {
          local type="$1"
          shift
          send_cmd "DATA" "$QNAME" "$QCLASS" "$type" "$XIP_TTL" "$ID" "$@"
        }

        log() {
          printf "[xip-pdns:$$] %s\n" "$@" >&2
        }


        #
        # xip.io domain helpers
        #
        XIP_DOMAIN_PATTERN="(^|\.)${XIP_DOMAIN//./\.}\$"
        NS_SUBDOMAIN_PATTERN="^ns-([0-9]+)\$"
        IP_SUBDOMAIN_PATTERN="(^|\.)(((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\$"
        DASHED_IP_SUBDOMAIN_PATTERN="(^|-|\.)(((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)-){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\$"
        BASE36_SUBDOMAIN_PATTERN="(^|\.)([a-z0-9]{1,7})\$"

        qtype_is() {
          [ "$QTYPE" = "$1" ] || [ "$QTYPE" = "ANY" ]
        }

        qname_matches_domain() {
          [[ "$QNAME" =~ $XIP_DOMAIN_PATTERN ]]
        }

        qname_is_root_domain() {
          [ "$QNAME" = "$XIP_DOMAIN" ]
        }

        extract_subdomain_from_qname() {
          SUBDOMAIN="${QNAME:0:${#QNAME}-${#XIP_DOMAIN}}"
          SUBDOMAIN="${SUBDOMAIN%.}"
        }

        subdomain_is_ns() {
          [[ "$SUBDOMAIN" =~ $NS_SUBDOMAIN_PATTERN ]]
        }

        subdomain_is_ip() {
          [[ "$SUBDOMAIN" =~ $IP_SUBDOMAIN_PATTERN ]]
        }

        subdomain_is_dashed_ip() {
          [[ "$SUBDOMAIN" =~ $DASHED_IP_SUBDOMAIN_PATTERN ]]
        }

        subdomain_is_base36() {
          [[ "$SUBDOMAIN" =~ $BASE36_SUBDOMAIN_PATTERN ]]
        }

        resolve_ns_subdomain() {
          local index="${SUBDOMAIN:3}"
          echo "${XIP_NS_ADDRESSES[$index-1]}"
        }

        resolve_ip_subdomain() {
          [[ "$SUBDOMAIN" =~ $IP_SUBDOMAIN_PATTERN ]] || true
          echo "${BASH_REMATCH[2]}"
        }

        resolve_dashed_ip_subdomain() {
          [[ "$SUBDOMAIN" =~ $DASHED_IP_SUBDOMAIN_PATTERN ]] || true
          echo "${BASH_REMATCH[2]//-/.}"
        }

        resolve_base36_subdomain() {
          [[ "$SUBDOMAIN" =~ $BASE36_SUBDOMAIN_PATTERN ]] || true
          local ip=$(( 36#${BASH_REMATCH[2]} ))
          printf "%d.%d.%d.%d" $(( ip&0xFF )) $(( (ip>>8)&0xFF )) $(( (ip>>16)&0xFF )) $(( (ip>>24)&0xFF ))
        }

        answer_soa_query() {
          send_answer "SOA" "admin.$XIP_DOMAIN ns-1.$XIP_DOMAIN $XIP_TIMESTAMP $XIP_TTL $XIP_TTL $XIP_TTL $XIP_TTL"
        }

        answer_ns_query() {
          local i=1
          local ns_address
          for ns_address in "${XIP_NS_ADDRESSES[@]}"; do
            send_answer "NS" "ns-$i.$XIP_DOMAIN"
            let i+=1
          done
        }

        answer_root_a_query() {
          local address
          for address in "${XIP_ROOT_ADDRESSES[@]}"; do
            send_answer "A" "$address"
          done
        }

        answer_mx_query() {
          set -- "${XIP_MX_RECORDS[@]}"
          while [ $# -gt 1 ]; do
            send_answer "MX" "$1	$2"
          shift 2
          done
        }

        answer_subdomain_a_query_for() {
          local type="$1"
          local address="$(resolve_${type}_subdomain)"
          if [ -n "$address" ]; then
            send_answer "A" "$address"
          fi
        }


        #
        # PowerDNS pipe backend implementation
        #
        trap fail err
        read_helo
        send_cmd "OK" "xip.io PowerDNS pipe backend (protocol version 1)"

        while read_query; do
          log "Query: type=$TYPE qname=$QNAME qclass=$QCLASS qtype=$QTYPE id=$ID ip=$IP"

          if qname_matches_domain; then
            if qname_is_root_domain; then
              if qtype_is "SOA"; then
                answer_soa_query
              fi

              if qtype_is "NS"; then
                answer_ns_query
              fi

              if qtype_is "A"; then
                answer_root_a_query
              fi

              if qtype_is "MX"; then
                answer_mx_query
              fi

            elif qtype_is "A"; then
              extract_subdomain_from_qname

              if subdomain_is_ns; then
                answer_subdomain_a_query_for ns

              elif subdomain_is_dashed_ip; then
                answer_subdomain_a_query_for dashed_ip

              elif subdomain_is_ip; then
                answer_subdomain_a_query_for ip

              elif subdomain_is_base36; then
                answer_subdomain_a_query_for base36
              fi
            fi
          fi

          send_cmd "END"
        done
      pipe_conf: |
        # Increment this timestamp when the contents of the file change.
        XIP_TIMESTAMP="2015081600"

        # The top-level domain for which the name server is authoritative.
        # CHANGEME: change "sslip.io" to your domain
        XIP_DOMAIN="sslip.io"

        # The public IP addresses (e.g. for the web site) of the top-level domain.
        # `A` queries for the top-level domain will return this list of addresses.
        # CHANGEME: change this to your domain's webserver's address
        XIP_ROOT_ADDRESSES=( "52.0.56.137" )

        # The public IP addresses on which this xip-pdns server will run.
        # `NS` queries for the top-level domain will return this list of addresses.
        # Each entry maps to a 1-based subdomain of the format `ns-1`, `ns-2`, etc.
        # `A` queries for these subdomains map to the corresponding addresses here.
        # CHANGEME: change this to match your NS records; one of these IP addresses
        # should match the jobs(xip).networks.static_ips listed above
        XIP_NS_ADDRESSES=( "52.0.56.137" "78.47.249.19" )

        # These are the MX records for your domain.  IF YOU'RE NOT SURE,
        # don't set it at at all (comment it out)--it defaults to no
        # MX records.
        XIP_MX_RECORDS=(
          "10"  "mx.zoho.com"
          "20"  "mx2.zoho.com"
        )

        # How long responses should be cached, in seconds.
        XIP_TTL=300

update:
  canaries: 1
  max_in_flight: 1
  serial: false
  canary_watch_time: 1000-60000
  update_watch_time: 1000-60000
